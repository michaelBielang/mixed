package elastic_file_indexer.indexer;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Date;

import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentFactory;

import elastic_file_indexer.helper.FileCrawler;
import elastic_file_indexer.rest_client.RestClientFactory;

public class Indexer {
	
	private RestHighLevelClient client;
	
	public Indexer() {
		 this.client = RestClientFactory.createRestClient();
	}
	
	public void indexFilesInPath(String path) {
		File dir = new File(path);
		FileCrawler.dirTree(dir).forEach(file -> addFile(file));
	}
	
	private void addFile(File file) {
		try {
			XContentBuilder builder = XContentFactory.jsonBuilder();
			BasicFileAttributes attr = null;
			
				attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
			builder.startObject();
			{
			    builder.field("path", file.getAbsolutePath());
			    builder.timeField("creationTime",  new Date(attr.creationTime().toMillis()));
			    builder.timeField("lastAccessTime",  new Date(attr.lastAccessTime().toMillis()));
			    builder.timeField("lastModifiedTime",  new Date(attr.lastModifiedTime().toMillis()));
			    builder.field("size", attr.size());
			}
			builder.endObject();
			IndexRequest indexRequest = new IndexRequest("posts")
			    .id("1").source(builder);		
			this.client.index(indexRequest, RequestOptions.DEFAULT);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	 protected void finalize() 
	  {
			try {
				client.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	  }
}
